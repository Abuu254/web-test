#!/opt/pwn.college/python

import os
import pathlib
import tempfile
import contextlib
import urllib
import time
import sqlite3

from flask import Flask, request, session, redirect
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException


flag = open("/flag").read().strip()
challenge_host = "challenge.localhost"
hacker_host = "hacker.localhost"
app = Flask(__name__)


class TemporaryDB:
    def __init__(self):
        self.db_file = tempfile.NamedTemporaryFile("x", suffix=".db")

    def execute(self, sql, parameters=()):
        connection = sqlite3.connect(self.db_file.name)
        connection.row_factory = sqlite3.Row
        cursor = connection.cursor()
        result = cursor.execute(sql, parameters)
        connection.commit()
        return result


db = TemporaryDB()


def html(code):
    return f"<html><body>{code}</body></html>\n"


def form(inputs):
    def form_input(**fields):
        return f"<input " + " ".join(f'{k}="{v}"' for k, v in fields.items() if v) + ">"

    inputs_html = "".join(
        form_input(name=name, type="text", placeholder=name) for name in inputs
    )
    submit_html = form_input(id="submit", type="submit", value="Submit")
    return html(f'<form method="POST">{inputs_html}{submit_html}</form>')


@contextlib.contextmanager
def run_browser():
    options = FirefoxOptions()
    options.add_argument("--headless")

    service = FirefoxService(log_path="/dev/null")
    driver = webdriver.Firefox(service=service, options=options)

    try:
        yield driver
    finally:
        driver.quit()


@app.route("/", methods=["GET", "POST"])
@app.route("/<path:path>", methods=["GET", "POST"])
def challenge(path=""):
    db.execute(
        (
            "CREATE TABLE IF NOT EXISTS users AS "
            'SELECT "flag" AS username, ? as password, ? as leak'
        ),
        (flag, False),
    )

    if request.path == "/login":
        if request.method == "POST":
            username = request.form.get("username")
            password = request.form.get("password")
            assert username, "Missing `username` form"
            assert password, "Missing `password` form"

            user = db.execute(
                f"SELECT rowid, * FROM users WHERE username = ? AND password = ?",
                (username, password),
            ).fetchone()
            assert user, "Invalid `username` or `password`"

            session["user"] = int(user["rowid"])
            return redirect(request.path)

        return form(["username", "password"])

    if request.path == "/leak":
        user_id = int(session.get("user", -1))
        user = db.execute("SELECT * FROM users WHERE rowid = ?", (user_id,)).fetchone()
        assert user, "Not logged in"
        db.execute(f"UPDATE users SET leak = TRUE WHERE rowid = ?", (user_id,))
        return "Leaked\n"

    if request.path == "/info":
        assert "user" in request.args, "Missing `user` argument"
        user_id = int(request.args["user"])
        user = db.execute("SELECT * FROM users WHERE rowid = ?", (user_id,)).fetchone()
        assert user, "Invalid `user`"
        info = [user["username"]]
        if user["leak"]:
            info.append(user["password"])
        return " ".join(info) + "\n"

    if request.path == "/visit":
        url = request.args.get("url")
        assert url, "Missing `url` argument"

        url_arg_parsed = urllib.parse.urlparse(url)
        assert (
            url_arg_parsed.hostname == hacker_host
        ), f"Invalid `url`, hostname should be `{hacker_host}`"

        with run_browser() as browser:
            browser.get(f"http://{challenge_host}/login")

            user_form = {
                "username": "flag",
                "password": flag,
            }
            for name, value in user_form.items():
                field = browser.find_element(By.NAME, name)
                field.send_keys(value)

            submit_field = browser.find_element(By.ID, "submit")
            submit_field.submit()
            WebDriverWait(browser, 10).until(EC.staleness_of(submit_field))

            browser.get(url)
            time.sleep(1)

        return "Visited\n"

    return "Not Found\n", 404


@app.before_request
def before_request():
    if request.host != challenge_host:
        return "Service Unavailable\n", 503


@app.after_request
def after_request(response):
    response.headers["Server"] = "pwn.college"
    del response.headers["Content-Type"]
    return response


@app.errorhandler(AssertionError)
def assertion_handler(error):
    print(f"{error}\n")
    return f"{error}\n", 400


@app.errorhandler(Exception)
def exception_handler(error):
    import traceback

    print(traceback.format_exc())
    return traceback.format_exc(), 500


def start():
    os.environ.clear()
    os.environ["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    os.setuid(os.geteuid())

    app.secret_key = flag
    app.run(challenge_host, 80)


start()
