#!/opt/pwn.college/python

import os
import contextlib
import urllib

from flask import Flask, request
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException


flag = open("/flag").read().strip()
challenge_host = "challenge.localhost"
hacker_host = "hacker.localhost"
app = Flask(__name__)


def html(code):
    return f"<html><body>{code}</body></html>\n"


@contextlib.contextmanager
def run_browser():
    options = FirefoxOptions()
    options.add_argument("--headless")

    service = FirefoxService(log_path="/dev/null")
    driver = webdriver.Firefox(service=service, options=options)

    try:
        yield driver
    finally:
        driver.quit()


@app.route("/", methods=["GET", "POST"])
@app.route("/<path:path>", methods=["GET", "POST"])
def challenge(path=""):
    if path == "echo":
        echo = request.args.get("echo")
        assert echo, "Missing `echo` argument"
        return html(echo)

    if path == "visit":
        url = request.args.get("url")
        assert url, "Missing `url` argument"

        url_arg_parsed = urllib.parse.urlparse(url)
        assert (
            url_arg_parsed.hostname == challenge_host
        ), f"Invalid `url`, hostname should be `{challenge_host}`"

        with run_browser() as browser:
            browser.get(url)
            try:
                WebDriverWait(browser, 1).until(EC.alert_is_present())
            except TimeoutException:
                return "Failed to alert\n"
            else:
                return f"{flag}\n"

    return "Not Found\n", 404


@app.before_request
def before_request():
    if request.host != challenge_host:
        return "Service Unavailable\n", 503


@app.after_request
def after_request(response):
    response.headers["Server"] = "pwn.college"
    del response.headers["Content-Type"]
    return response


@app.errorhandler(AssertionError)
def assertion_handler(error):
    print(f"{error}\n")
    return f"{error}\n", 400


@app.errorhandler(Exception)
def exception_handler(error):
    import traceback

    print(traceback.format_exc())
    return traceback.format_exc(), 500


def start():
    os.environ.clear()
    os.environ["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    os.setuid(os.geteuid())

    app.secret_key = flag
    app.run(challenge_host, 80)


start()
